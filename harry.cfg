# Configuration file for Harry, tool for computing string kernels

# Input configuration
input = {
    	# Input format.
    	# Supported types: "dir", "arc", "lines", "fasta"
    	input_format = "lines";

    	# Decode strings using URI encoding (0 = off)
    	decode_str = 0;

    	# Regex for extracting labels from FASTA descriptions
    	fasta_regex = " (\\+|-)?[0-9]+";

    	# Regex for extracting labels from text lines
    	lines_regex = "^(\\+|-)?[0-9]+";

    	# Reverse (flip) the input strings (0 = off)
    	reverse_str = 0;

    	# Provide a file containing stop words (one per line)
    	stopword_file = "";
}

measures = {

	# Selected similarity measure
	measure = "kern_subsequence";

	granularity = "tokens"

	# Delimiters for strings or empty string
	word_delim = "%09%0a%0d%20.,:;?!";

	# Number of threads (0 = auto)
	num_threads = 0; 

	# Cache size in megabytes.
	cache_size = 256;

	# Global cache (0 = off)
	global_cache = 0;

	# Module for Hamming distance
	dist_hamming = {
		# Normalization: "none", "min", "max" and "avg".
		norm = "none";
	};

	# Module for Levenshtein distance
	dist_levensthein = {
		# Normalization: "none", "min", "max" and "avg".
		norm = "none";
		
		# Costs for insertion, deletion and substitution
		cost_ins = 1.0;
		cost_del = 1.0;
		cost_sub = 1.0;
	}

	# Module for Damerau-Levenshtein distance
	dist_damerau = {
		# Normalization: "none", "min", "max" and "avg".
		norm = "none";

		# Costs for insertion, deletion, substitution and transposition
		cost_ins = 1.0;
		cost_del = 1.0;
		cost_sub = 1.0;
		cost_tra = 1.0;
	}

	# Module for Jaro distance and Jaro-Winkler distance
	dist_jarowinkler = {
		# Scaling factor for prefixes.
		scaling = 0.1;
	}

	# Module for Lee distance
	dist_lee = {
		# Range of symbols in strings. 
		min_sym = 0;
		max_sym = 255;
	}

	# Module for compression distance
	dist_compression = {
		# Compression level between 1 and 9.
		level = 9;
	}

	# Module for Bag distance
	dist_bag = {
		# Normalization: "none", "min", "max" and "avg".
		norm = "none";
	}	

	# Module kernel-based distance 
	dist_kern = {
		# Distance function 
		kern = "kern_wdegree";

		# Normalization: "none", "l2".
		norm = "none";

		# Return squared distance
		squared = 1;
	}

	# Module weighted-degree kernel with shifts
	kern_wdegree = {
		# Normalization: "none", "l2".
		norm = "l2";

		# Degree (k-mer/k-gram length)
		degree = 2;

		# Shift of kernel
		shift = 0;
	}

	# Module subsequence kernel
	kern_subsequence = {
		# Normalization: "none", "l2".
		norm = "l2";

		# Length of subsequences
		length = 2;

		# Weight for gaps;
		lambda = 0.1;
	}
        
	# Module spectrum kernel
	kern_spectrum = {
		# Normalization: "none", "l2".
		norm = "l2";

		# Length of k-mers (or n-grams)
		length = 2;
	}
	
	# Module distance substitution kernel
	kern_distance = {
		# Distance function 
		dist = "dist_levenshtein";

		# Substitution type: "linear", "poly", "neg", "rbf".
		type = "linear";
	
		# Normalization: "none", "l2".
		norm = "l2";

		# Scaling factor for "poly" and "rbf"
		gamma = 1.0;

		# Polynomial degree for "poly" and "neg"
		degree = 1.0;
	}

        # Module for similarity coefficients
        sim_coefficientv = {
                # Marching: "bin", "cnt"
                matching = "bin";
        }
}

# Configuration of output
output = {
    # Output format.
    # Supported formats: "text", "libsvm"
    output_format = "libsvm";

    # Save indices of strings (0 = off)
    save_indices = 1;

    # Save labels of strings (0 = off)
    save_labels = 0;

    # Save sources of strings (0 = off)
    save_sources = 0;

    # Compress output
    compress = 0;
};